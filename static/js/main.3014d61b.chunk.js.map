{"version":3,"sources":["dmAppointment.ts","dmMain.ts","dmRasaQuery.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar","person","day","8","time","9","10","11","12","1","2","3","4","5","grammar_2","dmAppointmentMachine","initial","states","init","on","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","recResult","actions","assign","target","ask","nomatch","confirmation","whole_day","create_appointment_whole_day","create_appointment_time","appointment_created","dmMachine","CLICK","welcome","wait","RESPONSE","event","RESPONSE_ERROR","error","dmAppointment","onDone","dmTodo","dmTimer","dmRasaQueryMachine","QUERY","query","invoke","src","nluRequest","fetch","Request","proxyurl","method","headers","body","then","data","json","intent","name","console","log","onError","inspect","url","iframe","machine","Machine","id","dmMain","dmRasaQuery","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.3014d61b.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    // Persons\n    \"John\": { person: \"John Appleseed\" },\n    \"Mary\": { person: \"Mary Shelly\" },\n    \"Jane\": { person: \"Jane Austen\" },\n    \"Albert\": { person: \"Albert Einstein\" },\n    \"Coco\": { person: \"Coco Chanel\" },\n    \"Rebecca\": { person: \"Rebecka Black\" },\n    \"Vlad\": { person: \"Vlad Maraev\" },\n    // Weekdays\n    \"on Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"Monday\": { day: \"Monday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"Friday\": { day: \"Friday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"Sunday\": { day: \"Sunday\" },\n    // Times\n    8: { time: \"8:00\" },\n    9: { time: \"9:00\" },\n    10: { time: \"10:00\" },\n    11: { time: \"11:00\" },\n    12: { time: \"12:00\" },\n    1: { time: \"1:00\" },\n    2: { time: \"2:00\" },\n    3: { time: \"3:00\" },\n    4: { time: \"4:00\" },\n    5: { time: \"5:00\" },\n    \"at 8 p.m.\": { time: \"8:00\" },\n    \"at 9 p.m.\": { time: \"9:00\" },\n    \"at 10 p.m.\": { time: \"10:00\" },\n    \"at 11 p.m.\": { time: \"11:00\" },\n    \"at 12 p.m.\": { time: \"12:00\" },\n    \"at 1 p.m.\": { time: \"1:00\" },\n    \"at 2 p.m.\": { time: \"2:00\" },\n    \"at 3 p.m.\": { time: \"3:00\" },\n    \"at 4 p.m.\": { time: \"4:00\" },\n    \"at 5 p.m.\": { time: \"5:00\" },\n    \"at 8\": { time: \"8:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"at 1\": { time: \"1:00\" },\n    \"at 2\": { time: \"2:00\" },\n    \"at 3\": { time: \"3:00\" },\n    \"at 4\": { time: \"4:00\" },\n    \"at 5\": { time: \"5:00\" },\n}\n\nconst grammar_2: { [index: string]: {  } } = {\n    \"yes\": true,\n    \"you bet\": true,\n    \"yeah\": true,\n    \"no\": false,\n    \"no way\": false,\n    \"nope\": false,\n}\n\n\nexport const dmAppointmentMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Whom are you meeting?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"confirmation\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"whole_day\"\n                },\n                { target: \".nomatch\" }]},\n            states: {\n                confirmation: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}.`,\n                    })),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n                prompt: {\n                    entry: say(\"On which day is your meeting?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know that day\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        whole_day: {\n            initial: \"confirmation\",\n            on: {\n                RECOGNISED: [\n                    {\n                        cond: (context) => grammar_2[context.recResult] === true,\n                        target: \"create_appointment_whole_day\",\n                    },\n                    {\n                        cond: (context) => grammar_2[context.recResult] === false, \n                        target: \"time\"\n                    },\n                    { target: \".nomatch\" }]},\n            states: {\n                confirmation: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.day}`,\n                    })),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n                prompt: {\n                    entry: say(\"Will it take the whole day?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I didn't understand your answer\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        time: {\n            initial: \"confirmation\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"create_appointment_time\"\n\n                },\n                { target: \".nomatch\" }]},\n            states: {\n                confirmation: {\n                    entry: say(`OK.`),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n                prompt: {\n                    entry: say(\"What time is your meeting?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I didn't catch that\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        create_appointment_whole_day: {\n            initial: \"confirmation\",\n            on: {\n                RECOGNISED: [\n                    {\n                        cond: (context) => grammar_2[context.recResult] === true,\n                        target: \"appointment_created\",\n                    },\n                    {\n                        cond: (context) => grammar_2[context.recResult] === false,\n                        target: \"who\"\n                    },\n                    { target: \".nomatch\" }]},\n            states: {\n                confirmation: {\n                    entry: say(`OK.`),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`,\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I didn't catch that\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        create_appointment_time: {\n            initial: \"confirmation\",\n            on: {\n                RECOGNISED: [\n                    {\n                        cond: (context) => grammar_2[context.recResult] === true,\n                        target: \"appointment_created\",\n                    },\n                    {\n                        cond: (context) => grammar_2[context.recResult] === false,\n                        target: \"who\"\n                    },\n                    { target: \".nomatch\" }]},\n            states: {\n                confirmation: {\n                    entry: say(`OK.`),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`,\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I didn't catch that\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        appointment_created: {\n            entry: say(\"Your appointment has been created!\"),\n            type: 'final'\n        }\n    }\n})\n","import { MachineConfig, send, Action, assign } from \"xstate\";\nimport { dmAppointmentMachine } from \"./dmAppointment\";\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction query(text: string): Action<SDSContext, SDSEvent> {\n    console.log(\"Sending query\")\n    return send((_context: SDSContext) => ({ type: \"QUERY\", value: text }))\n}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\t    welcome: {\n\t        on: {\n\t    \t    RECOGNISED: {\n\t    \t        actions: send((context) => ({ type: \"QUERY\", value: context.recResult })),\n\t    \t        target: 'wait',\n                }\n            },\n            initial: 'prompt',\n            states: {\n                prompt: {\n                    entry: say(\"Hi! What do you want me to do?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: listen(),\n                },\n            },\n\t    },\n        wait: {\n            on: {\n                RESPONSE: [\n                    {\n                        cond: (context, event) => event.value === \"appointment\",\n                        target: 'dmAppointment'\n                    },\n                    {\n                        cond: (context, event) => event.value === \"todo_item\",\n                        target: 'dmTodo'\n                    },\n                    {\n                        cond: (context, event) => event.value === \"timer\",\n                        target: 'dmTimer'\n                    },\n                    { target: \"nomatch\" }\n                ],\n                RESPONSE_ERROR: {\n                    target: 'error'\n                }\n            }\n        },\n        error: {\n            entry: say(\"Oh no, an error!\"),\n            on: { ENDSPEECH: 'init' }\n        },\n        nomatch: {\n            entry: say(\"Sorry, I don't know how to do this.\"),\n            on: { ENDSPEECH: 'init' }\n        },\n        dmAppointment: {\n            ...dmAppointmentMachine,\n            onDone: {\n                target: 'init' \n            }\n        },\n        dmTodo: {\n            entry: say(\"Let's create a to-do item!\"),\n            on: { ENDSPEECH: 'init' }\n        },\n        dmTimer: {\n            entry: say(\"Let's set a timer!\"),\n            on: { ENDSPEECH: 'init' }\n        },\n    },\n})","import { MachineConfig, send, assign, Action } from \"xstate\";\n\nconst proxyurl = 'https://cors-anywhere.herokuapp.com/';\nconst rasaurl = 'https://si-jon-nlu-app.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    })).then(data => data.json());\n\nexport const dmRasaQueryMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                QUERY: {\n                    actions: assign((context, event) => { return { query: event.value } }),\n                    target:'query'\n                }\n            }\n        },\n\t    query: {\n\t        invoke: {\n                src: (context, event) => nluRequest(context.query),\n                onDone: {\n                    target: 'init',\n                    actions: [\n                        send((context, event) => ({ type: \"RESPONSE\", value: event.data.intent.name })),\n                        (context:SDSContext, event:any) => console.log(event.data)\n                        ]\n                },\n\t    \t    onError: {\n                    target: 'init',\n\t    \t        actions: [\n                        send((context, event) => ({ type: \"RESPONSE_ERROR\", value: event.data })),\n                        (context:SDSContext, event:any) => console.log(event.data)\n                    ]\n                }\n            }\n\t    }\n    }\n})\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmMain\";\nimport { dmRasaQueryMachine } from \"./dmRasaQuery\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dmMain: {\n            ...dmMachine,\n        },\n        dmRasaQuery: {\n            ...dmRasaQueryMachine,\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => {\n                                console.log('I was triggered during LISTEN')\n                                return { ttsAgenda: event.value } \n                            })\n                        }\n                    }\n                },\n                recognising: {\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Listening.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}